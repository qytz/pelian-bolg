<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>佛说</title><link href="http://lennyhbt.github.io/" rel="alternate"></link><link href="http://lennyhbt.github.io/feeds/ji-zhu-za-tan.atom.xml" rel="self"></link><id>http://lennyhbt.github.io/</id><updated>2015-01-24T10:50:00+08:00</updated><entry><title>小结LDAP</title><link href="http://lennyhbt.github.io/ldap_overview.html" rel="alternate"></link><updated>2015-01-24T10:50:00+08:00</updated><author><name>Lennyh</name></author><id>tag:lennyhbt.github.io,2015-01-14:ldap_overview.html</id><summary type="html">
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;LDAP 定义 &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt; 本文不打算重复 LDAP 的标准定义 ， 仅谈一下自己的理解 。&lt;/p&gt;
&lt;p&gt;LDAP 译为轻量级目录访问协议 ， 一般网上经常拿其与关系型数据库做类比并比较他们的不同 。&lt;/p&gt;
&lt;p&gt; 事实上 ，LDAP 既不是数据库也不是存储数据的方法 ， 而是用来访问数据的方法 。LDAP 可以访问的 
 是存储在目录信息树 （Directory Information Tree (DIT)） 中的数据 。&lt;/p&gt;
&lt;p&gt; 目录信息树存储数据的方法与关系型数据库非常的不同 。 关系型数据库的数据是存储在某一数据库 
 的某一数据表中的某以记录内的 ， 因此数据库中定位一条记录数据需要三个要素 ： 数据库 、
 数据表 、 记录号 ； 目录信息树存储数据的方式是树状结构 ， 定位一条数据的方法是从树根到叶子节点 
 的唯一路径 ， 数据就存储在叶子节点中 。&lt;/p&gt;
&lt;p&gt; 由此可见 ，LDAP 与关系型数据库类比其实是两种数据存储与访问方式的类比 。&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id14"&gt;LDAP 是访问目录信息树中数据的协议 &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt; 事实上 ，LDAP 仅定义了访问协议 ， 数据的真实存储方式并不在 LDAP 的考量范围内 ， 即只要提供了 
 目录访问接口的数据都可以通过 LDAP 协议来访问 ， 如果关系型数据库实现了该接口也是可以通过 
LDAP 协议来反问的 。 从这个角度来讲 ， 确实不应该将 LDAP 与关系型数据库做类比 。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;LDAP 特性 &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt; 且 LDAP 对数据的读取和查询做了优化 ， 并不适用于经常变动的数据 。&lt;/p&gt;
&lt;p&gt;LDAP 不定义客户端和服务端的工作方式 ， 但会定义客户端和服务端的通信方式 ，
 另外 ，LDAP 还会定义 LDAP 数据库的访问权限及服务端数据的格式和属性 。&lt;/p&gt;
&lt;p&gt;LDAP 有三种基本的通信机制 ： 没有处理的匿名访问 ； 基本的用户名 、 密码形式的认证 ； 使用 SASL、SSL 的安全认证方式 。LDAP 和很多其他协议一样 ， 基于 tcp/ip 协议通信 ， 注重服务的可用性 、 信息的保密性等等 。 部署了 LDAP 的应用不会直接访问目录中的内容 ， 一般通过函数调用或者 API， 应用可以通过定义的 C、Java 的 API 进行访问 ，Java 应用的访问方式为 JNDI(Java Naming and Directory Interface)。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id16"&gt;LDAP 结构 &lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id17"&gt; 目录信息树 &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt; 目录信息树以目录条目 （entry） 来存储和组织数据 ， 每一个目录条目通常描述一个对象 （ 例如 ： 一个人 ），
 目录条目有一个唯一名 （DN，distinguished name） 进行标识 。DN 由一系列的相对唯一名 （RDN，relative distinguished name） 来标识 。 每一个目录条目由一或多个属性来描述该条目 ， 例如描述人的条目有一个 
 电话号码的属性 。&lt;/p&gt;
&lt;p&gt; 引用一张  &lt;a class="reference external" href="http://www.redbooks.ibm.com/abstracts/sg244986.html"&gt;Understanding LDAP
Design and Implementation&lt;/a&gt;  的图示 ，&lt;/p&gt;
&lt;a class="reference external image-reference" href="/images/ldap_dit.png"&gt;&lt;img alt="ldap dir info tree" src="/images/ldap_dit.png"/&gt;&lt;/a&gt;
&lt;p&gt; 目录条目根据他们在目录信息树中的位置命名 ， 上图底部的目录条目的 DN 唯一名是 :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cn=John Smith,ou=people,o=ibm,c=us.
The organizational group people has the DN of ou=people,o=ibm,c=us.
&lt;/pre&gt;
&lt;p&gt;LDAP 的查询等操作语句在这里就不介绍了 ， 有需求的可以在参考资料中找 。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id18"&gt;LDAP 安全 &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;LDAP 安全相关的资料请参考  &lt;a class="reference external" href="http://drops.wooyun.org/tips/967"&gt;LDAP 注入与防御剖析 &lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;LDAP 服务器配置 &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt; 请参考  &lt;a class="reference external" href="http://wiki.jabbercn.org/index.php?title=XEP-0216&amp;amp;oldid=115"&gt;OpenLDAP 管理员指南 &lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id20"&gt; 参考资料 &lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://drops.wooyun.org/tips/967"&gt;LDAP 注入与防御剖析 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.redbooks.ibm.com/abstracts/sg244986.html"&gt;Understanding LDAP Design and Implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://wiki.jabbercn.org/index.php?title=XEP-0216&amp;amp;oldid=115"&gt;OpenLDAP 管理员指南 &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="security"></category><category term="misc"></category><category term="tech"></category></entry><entry><title>系统安全的思考</title><link href="http://lennyhbt.github.io/system_security_thought.html" rel="alternate"></link><updated>2014-12-17T19:24:00+08:00</updated><author><name>Lennyh</name></author><id>tag:lennyhbt.github.io,2015-01-14:system_security_thought.html</id><summary type="html">
&lt;p&gt;&lt;strong&gt; 世上并没有绝对的安全 ， 只有安全成本的问题 。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 真正的安全不过是一种意识 。&lt;/strong&gt;&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt; 过往 &lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt; 网络安全 &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt; 工作相关 ， 做的一直是跟系统安全相关的东西 。&lt;/p&gt;
&lt;p&gt; 前几年的时候在做的是网络安全 ， 所谓的网络安全 。&lt;/p&gt;
&lt;p&gt; 说是网络安全 ， 其实跟安全的关系不是很大 ， 主要还是做网络设备 ， 支持各种协议及功能 ，
 还要尽可能地提高性能 。&lt;/p&gt;
&lt;p&gt; 跟安全的那点儿关系就是 ， 在网络设备里面嵌入了部分跟安全相关的功能 。&lt;/p&gt;
&lt;p&gt; 想来 ， 像访问包过滤 （ 很多厂商也叫 ACL， 访问控制列表 ），NAT 转换这些跟安全的关联性也不大 
 吧 ， 他们是更倾向于控制和管理的功能 ；DPI 协议识别呢 ？ 算是个基础功能吧 ， 接下来可以根据 
 识别结果做控制与分析 ， 也可以继续深入的做攻击防御 。&lt;/p&gt;
&lt;p&gt; 那么真正跟安全密切相关的功能有哪些呢 ？
MAC/IP 绑定 ， 攻击防护 ， 网页防篡改等 ， 这在网络安全设备像硬件防火墙这些 ， 的功能中 ，
 着实的算不算主要的功能吧 ， 也不常用 。 只是说多一个功能就多一个卖点 。&lt;/p&gt;
&lt;p&gt; 其实网路安全设备很少关注自身的安全 ， 挺多厂商把侧重点放在了性能上面 。&lt;/p&gt;
&lt;p&gt; 真的有可以提供整体安全方案的厂商吗 ？ 我是不信的 ， 至少国内的厂商是这样的吧 。
 并不是说这些设备没有必要 ， 确实很多功能还是很好的 ， 但是跟系统安全相差的还是很远的吧 。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt; 现今 &lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt; 真正的系统安全 &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt; 换过工作之后负责系统的一个安全模块 ， 对安全有了稍微深入一点的理解 。&lt;/p&gt;
&lt;p&gt; 安全与易用 ， 在某种程度上会有一些冲突 ， 但这个程度肯定不会很大 。&lt;/p&gt;
&lt;p&gt; 易用也是一种安全 ， 想用户所想 。
 系统遭遇到安全威胁时 ， 用户能想到的 ， 系统帮他去做了 ， 用户没有想到的 ，
 系统也帮他做好了 ， 系统也帮他做了 ， 这是易用 ， 也是安全 。&lt;/p&gt;
&lt;p&gt; 因此 ， 系统的正确行为定义也是安全的基础 ， 在威胁出现时不能做出正确响应 ， 就没有安全可言了 。&lt;/p&gt;
&lt;p&gt; 安全是不能有短板的 ， 不仅要保证数据的安全 ， 还要保证用户输入的安全 ， 传输的安全等等 ，
 缺了任何一个环节 ， 就像系统有了漏洞一样 ， 攻击者顺着这个漏洞可以获取系统中的很多东西 。&lt;/p&gt;
&lt;p&gt; 安全的核心工作应该是在后台默默完成的 ， 很少的提示用户 ， 更很少让用户来选择 ，
 就像武侠小说中的扫地僧 ， 绝大多数时候用户都意识不到他的存在 ， 他只是在后台默默的做着 
 自己的工作 ， 他的存在只是为了那突然的攻击出现的时候 。&lt;/p&gt;
&lt;p&gt; 稳定也是一种安全 ， 我们无法保证每一次的修改都可以做到全系统的测试 ， 而每次修改对系统 
 哪些模块有影响又是不完全预知的 ， 尤其是系统的基础架构 ， 略一更改影响面都很大 。 系统不 
 稳定就很容易出问题 。&lt;/p&gt;
&lt;p&gt; 其实 ， 安全是一种意识 ， 这种意识应该无处不在 。
 开发中的安全意识保证我们的系统漏洞更少 ， 系统更稳健 。
 如果我们在开发中测试代码随便写 ， 变量不初始化 ， 溢出不检查 ， 系统就很容易被攻击 。&lt;/p&gt;
&lt;p&gt; 使用中的安全意识保证了我们自己这个系统更加不容易被骗 。
 我们自己如果更加的注意自己的隐私不随意泄露 ， 遇到电话 / 网络诈骗时可以多核实 ， 社会 
 工程学也不那么容易就获取到我们的电话 、 邮箱 、 密码等信息了 。&lt;/p&gt;
&lt;p&gt; 只要在系统的所有环节做到一般性的防护 ， 就已经比在系统的关键环节做很强的防护但在 
 其他环节不防护安全很多了 。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt; 将来 &lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id13"&gt; 系统的安全机制 &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt; 系统还是要提供必要的基础的安全机制供其他的系统组件使用的 。&lt;/p&gt;
&lt;p&gt; 如果需要系统提供的一些基础功能需要每个系统组件自己实现并维护 ， 轮子重复造不说 ，
 安全隐患的增加也是很严重的 ， 因为保证这些基础功能的安全变的更加的麻烦 。 修复起来也很麻烦 。&lt;/p&gt;
&lt;p&gt; 系统的安全机制做的好 ， 省了很多的麻烦 。&lt;/p&gt;
&lt;p&gt; 我们需要更加深入的研究与实现系统的安全机制 。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="security"></category><category term="misc"></category></entry></feed>