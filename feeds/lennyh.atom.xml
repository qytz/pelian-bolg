<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>佛说</title><link href="http://lennyhbt.github.io/" rel="alternate"></link><link href="http://lennyhbt.github.io/feeds/lennyh.atom.xml" rel="self"></link><id>http://lennyhbt.github.io/</id><updated>2014-12-24T15:06:00+08:00</updated><entry><title>VPN 高级选项那些事</title><link href="http://lennyhbt.github.io/vpn_advance_options.html" rel="alternate"></link><updated>2014-12-24T15:06:00+08:00</updated><author><name>Lennyh</name></author><id>tag:lennyhbt.github.io,2014-12-24:vpn_advance_options.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt; 一 、VPN 高级选项 &lt;/h2&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;VPN 高级选项有哪些 ， 都是什么意思 &lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;DNS  搜索域 &lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;These are for the mechanism for going from a machine name to a Fully Qualified Domain Name.&lt;/p&gt;
&lt;p&gt;DNS searches can only look at a Fully Qualified Domain Name, such as mymachine.example.com. But, it's a pain to type out mymachine.example.com, you want to be able to just type mymachine.&lt;/p&gt;
&lt;p&gt;Using Search Domains is the mechanism to do this. If you type a name that does not end with a period, it knows it needs to add the search domains for the lookup. So, lets say your Search Domains list was: example.org, example.com&lt;/p&gt;
&lt;p&gt;mymachine&lt;/p&gt;
&lt;p&gt;would try first mymachine.example.org, not find it, then try mymachine.example.com, found it, now done.&lt;/p&gt;
&lt;p&gt;mymachine.example.com&lt;/p&gt;
&lt;p&gt;would try mymachine.example.com.example.org (remember, it doesn't end with a period, still adds domains), fail, then mymachine.example.com.example.com, not find it, fall back to mymachine.example.com, found it, now done&lt;/p&gt;
&lt;p&gt;mymachine.example.com. Ends with a period, no searching, just do mymachine.example.com&lt;/p&gt;
&lt;p&gt;Soooo.....&lt;/p&gt;
&lt;p&gt;If you have your own DNS domain such as example.com, put it there. If not, ignore it. It really is more corporate than a home setting.&lt;/p&gt;
&lt;p class="last"&gt; 参考  &lt;a class="reference external" href="http://superuser.com/questions/184361/what-is-the-search-domains-field-for-in-the-tcp-ip-dns-settings-control-panel"&gt;What is the “Search Domains” field for in the tcp/ip DNS settings control panel/preference pane for?&amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;DNS  服务器 &lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt; 域名系统 （ 英文 ：Domain Name System， 縮寫 ：DNS） 是因特网的一项服务 。 它作为将域名和 IP 地址相互映射的一个分布式数据库 ， 能够使人更方便的访问互联网 。DNS  使用 TCP 和 UDP 端口 53。 当前 ， 对于每一级域名长度的限制是 63 个字符 ， 域名总长度则不能超过 253 个字符 。&lt;/p&gt;
&lt;p class="last"&gt; 参考  &lt;a class="reference external" href="http://zh.wikipedia.org/zh/%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F"&gt; 域名系统 &lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt; 转发路线 &lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt; 即转发路由 ， 因 DNS 服务器不提供任何服务 ， 因此所有的请求都需要经过转发才能到达可以响应请求的服务器 ， 转发路线即配置发往哪些地址请求的需经过 VPN 转发 。&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt; 为什么需要这些选项 &lt;/h3&gt;
&lt;p&gt; 这些选项其实只是一些基础的网络参数 ， 因此所有的网络连接 （ 包括 VPN） 都需要这些选项 。 但是并不是所有的网络连接都需要手动配置这些参数 。 那么为什么 VPN 更加的需要配置这些参数呢 ？&lt;/p&gt;
&lt;p&gt;VPN 是一种常用于连接中 、 大型企业或团体与团体间的私人网络的通讯方法 。 虚拟私人网络的讯息透过公用的网络架构 （ 例如 ： 互联网 ） 来传送内联网的网络讯息 。 这种技术可以用不安全的网络 （ 例如 ： 互联网 ） 來傳送可靠 、 安全的訊息 。[ 摘自  &lt;a class="reference external" href="http://zh.wikipedia.org/zh/%E8%99%9B%E6%93%AC%E7%A7%81%E4%BA%BA%E7%B6%B2%E8%B7%AF&amp;gt;"&gt; 危机百科 &lt;/a&gt; ]&lt;/p&gt;
&lt;p&gt;DNS 请求呢 ？ 在未配置 VPN 之前 ， 我们使用的是不安全网络上的 DNS 服务器 ， 如果连接到 VPN 之后我们仍然连接不安全网络上的 DNS 服务器 ， 如何保证我们的数据安全 ？
DNS 搜索域是一个方便使用的选项 。&lt;/p&gt;
&lt;p&gt; 路由则指定了哪些数据是需要 VPN 网络来保护的 ， 如果不指定 ， 或者系统中所有的流量都经过 VPN， 但是 VPN 连接到的私有网络并不能提供不安全网络中所有的网络请求 ； 或者 
 系统中所有的流量都不经过 VPN 服务器 ， 连接 VPN 干嘛 ， 当摆设吗 ？&lt;/p&gt;
&lt;p&gt; 由此可见 ， 这些网络高级选项在 VPN 的配置中还是很有必要的 。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="connman"&gt;
&lt;h2&gt; 二 、 关于 connman&lt;/h2&gt;
&lt;p&gt; 使用 connman 管理系统网络连接的例子并不多 ， 网络上相关的资料也很少 。
 万幸的是 ，connman 自带的文档 (doc 目录 ) 大概可以把 connman 的设计原则和使用方法解释清除了 。
 以下内容及为参考该文档及源代码以及本人的推测得来的 ， 不一定准确 。&lt;/p&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;connman 是如何管理所有连接的 &lt;/h3&gt;
&lt;pre class="literal-block"&gt;
src/provider.c  --  管理 connman 中每一个 （ 不是每一种 ） 连接 ， 保存连接 。
src/service.c   --  管理连接服务 。
src/task.c  -- connman 中对连接的代码 ， 负责创建与维护真正的连接进程 。
&lt;/pre&gt;
&lt;p&gt; 这几个代码文件大概实现了 connman 连接管理的框架 ， 但是新建连接后还需要设置很多的网络参数 ，
 等等 ， 正是这一部分使得 connman 显得更加的复杂 。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="connman-dns"&gt;
&lt;h3&gt;connman 是如何管理网络参数的 （ 路由 、DNS 等 ）&lt;/h3&gt;
&lt;p&gt;connman 中对网络参数的管理是基于连接的 ， 即每个连接都有不同的网络参数配置 ， 该连接生效时 connman 会根据 
 连接属性更新系统的网络参数 。&lt;/p&gt;
&lt;p&gt;connman 封装了很多对系统网络参数修改的 API， 如下列举部分 :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
src/inet.c  --  实现对系统路由的配置 
src/ipconfig.c  --  实现对系统地址的配置 
src/resolver.c  --  实现对系统 DNS 的配置 ，connman 有选项支持 dns 代理 
&lt;/pre&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;connman-vpn 与上述描述并不完全一致 。
 当然 ，vpn 连接也是由 connman_task 创建具体的任务来连接的 ， 但是 。
vpn/vpn-manager.c 提供新建 / 删除 VPN 连接的功能 (create/remove/get_connections...)。
vpn/vpn-provider.c 提供了 vpn 连接 / 断开功能 (do_connect/do_disconnect...)。
vpn 连接建立 / 删除时会发送 ConnectionAdded/ConnectionRemoved 信号 ，
vpn 连接时会发送 PropertyChanged 信号 。
connman 的 vpn 插件会监听这些信号 ， 在新建 / 删除 vpn 连接时会在 connman 进程中建立该连接的 provider 及 service。
connman 监听到 PropertyChanged 信号时会根据属性设置系统当前的网络参数 （dns 等 ）。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt; 推荐文档阅读顺序 ：
vpn-overview.txt -&amp;gt; vpn-manager-api.txt -&amp;gt; vpn-connection-api.txt&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="qt-qml-and-d-bus"&gt;
&lt;h2&gt; 四 、Qt 、QML and D-Bus&lt;/h2&gt;
&lt;p&gt;Connman 是以 daemon 进程在系统后台运行的 ， 要访问 Connman 提供的服务 ， 只能通过进程间通信类似的机制 。
 事实上 Connman 提供的服务都是以 D-Bus 方法即信号作为 API 接口的 。&lt;/p&gt;
&lt;p&gt; 例如 ， 新建 / 删除 VPN、 连接 VPN 的接口如下 ：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="lineno"&gt;1 &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;DBusMessage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DBusConnection&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DBusMessage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="lineno"&gt;2 &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;DBusMessage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DBusConnection&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DBusMessage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="lineno"&gt;3 &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;DBusMessage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;do_connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DBusConnection&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DBusMessage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="qtd-bus"&gt;
&lt;h3&gt;Qt 对 D-Bus 的支持 &lt;/h3&gt;
&lt;p&gt;Qt 对 D-Bus 的支持算是基本完善 ， 该有的都可以有 ， 不该有的可能会可以有 。（：D）&lt;/p&gt;
&lt;p&gt; 可以通过 Qt 中 D-Bus 相关的库函数创建 D-Bus 服务 ， 或者使用别人提供的服务 。 对发送接收数据类型的支持也比较完整 ， 不仅能够 
 收发基本的整数 、 字符串等 ， 复杂的字典 、 数组等自然也不在话下 。&lt;/p&gt;
&lt;p&gt; 但是 Qt 对 DBUS_TYPE_STRUCT 的支持需要稍多做一些工作 ， 下面的章节会有介绍 。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="qmld-bus"&gt;
&lt;h3&gt;QML 对 D-Bus 的支持 &lt;/h3&gt;
&lt;p&gt; 很遗憾 ，QML 原生并不支持 D-Bus， 但是可以通过两种变通的途径使用 。
 第一是 ， 在 C++ 代码中封装调用 D-Bus 的接口 ， 并注册到 QML 中 。
 第二种 ， 是采用非 QT 官方的插件 ， 实现 ， 例如 ： &lt;a class="reference external" href="https://github.com/nemomobile/nemo-qml-plugin-dbus"&gt;Nemo Mobile D-Bus QML Plugin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 好吧 ， 其实是一种 ， 第二种其实同样是 C++ 代码中封装了调用 D-Bus 的接口 ， 但是除此之外 ， 还有什么办法可以扩展 QML 不支持的功能吗 ？&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="qtd-busdbus-type-struct"&gt;
&lt;h3&gt;Qt 对 D-Bus 中 DBUS_TYPE_STRUCT 的支持 &lt;/h3&gt;
&lt;p&gt;Qt 有自己的类型系统 ， 不知是该庆幸还是该懊恼 。
Qt 的类型系统极大的丰富了我们的精神文化生活 ， 噢不 ， 是极大的方便了我们的开发 ，QVariant， 信号 / 槽 （QObject） 等等 。
 但是这样一来我们自己定义的类型却无法使用这些方便的特性 ， 而且 Qt D-Bus 也不支持自定义类型的发送与接收 。&lt;/p&gt;
&lt;p&gt; 幸运的是 ， 上帝在关上这扇门的时候悄悄给我们开了一扇窗 ， 我们可以将自己定义的类型注册到 Qt 的元类型系统中去 ，
 这样我们自己定义的类型也可以使用 Qt 提供的很多方便的特性了 ， 最重要的是我们自定义的结构也可以通过 Qt 的 D-Bus 接口发送与接收了 。&lt;/p&gt;
&lt;p&gt; 创建方法在此不表 ， 无非是在适当的地方增加几次调用 :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Q_DECLARE_METATYPE(Type)；
int qRegisterMetaType(const char * typeName)；
int qDBusRegisterMetaType()；
&lt;/pre&gt;
&lt;p&gt; 详情参看如下链接 ：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://qtdocs.sourceforge.net/index.php/%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89Qt%E7%B1%BB%E5%9E%8B"&gt; 创建自定义 Qt 类型 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.qtcentre.org/threads/26871-Problems-with-marshalling-a-struct-to-Qt-DBus"&gt;Problems with marshalling a struct to Qt/DBus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="linux"&gt;
&lt;h2&gt; 五 、Linux  连接管理 &lt;/h2&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt; 都有哪些连接管理实现 &lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Android：&lt;a class="reference external" href="http://developer.android.com/reference/android/net/ConnectivityManager.html"&gt;ConnectivityManager&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://wiki.gnome.org/Projects/NetworkManager"&gt;NetworkManager&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;NetworkManager is a set of co-operative tools that make networking simple and straightforward. Whether Wi-Fi, wired, bond, bridge, 3G, or Bluetooth, NetworkManager allows you to quickly move from one network to another: once a network has been configured and joined, it can be detected and re-joined automatically the next time its available.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://01.org/zh/connman?langredirect=1"&gt;ConnMan&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;ConnMan is a daemon for managing Internet connections within embedded device and integrates a vast range of communication features usually split between many daemons such as DHCP, DNS and NTP. The result of this consolidation is low memory consumption with a fast, coherent, synchronized reaction to changing network conditions.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt; 为什么需要连接管理 &lt;/h3&gt;
&lt;p&gt; 几乎所有的现代操作系统都有统一的连接管理 ， 这是为什么呢 ？
 其实这个问题我也不知道 。 所以 ， 下面的内容纯属揣测 ， 如有不对恳请指正 。&lt;/p&gt;
&lt;p&gt; 大概是有两个原因吧 ， 我想 。
 一是便于用户的配置 ， 试想 ， 用户连接上一个新的网络 （ 有线 、 无线 、VPN 等 ） 后 ， 要手动的去修改 DNS、 路由 、 地址等信息 ，
 肯定是不可原谅的 ， 或者进一步 ， 需要在不同的位置分别通过不用的程序去配置不同的网络参数 ， 少改了一项网络可就不正常了哦 。&lt;/p&gt;
&lt;p&gt; 二是便于网络的管理 ， 如果每种连接自己管自己的网络配置 ， 可是这些配置的生效可是在一个系统上的 ， 于是每个程序都去修改 
DNS 配置 ， 路由 ， 地址等信息 ， 你确保不会改乱 ？&lt;/p&gt;
&lt;p&gt; 其实反观其他子系统 ， 声音肯定要在所有要播放 / 录制声音的程序后面有一个 daemon 来负责系统的混音及播放工作 ， 不可能每个程序各播各的 ， 你肯定不原因听到那种声音的 。
 显示子系统不可能是每个想要在屏幕上显示东西的程序自己向屏幕上写吧 ， 这样我显示了一个窗口 ， 你显示了一个通知 ， 我有显示了一个文档 ， 你确定用户能够看得请 ？ 所以还是需要有显示管理器在后面跑的 。&lt;/p&gt;
&lt;p&gt; 同理 ， 系统的网络配置大家一起改 ， 你确定不会改乱 ？
 这大概是一个趋势吧 ， 只有一种或者两种网络连接的时候 ， 我可以随便改 ， 要是系统有很多种连接类型 ， 可就不能胡来了 。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="技术杂谈"></category></entry><entry><title>JavaScript的移位运算与IP地址处理</title><link href="http://lennyhbt.github.io/javascript-bit-operation-with-ip-process.html" rel="alternate"></link><updated>2014-12-17T19:24:00+08:00</updated><author><name>Lennyh</name></author><id>tag:lennyhbt.github.io,2014-12-17:javascript-bit-operation-with-ip-process.html</id><summary type="html">&lt;p&gt; 最近在做项目时有一个需求 ， 将用户输入的  &lt;em&gt; 地址 / 掩码 &lt;/em&gt;  对解析出来 ， 并将数字掩码转换成点分的格式 。&lt;/p&gt;
&lt;p&gt; 想到在 C 代码里面应该还算容易实现 ， 通过最大 32 位整数位移就可完成 ， 但是在  JavaScript  中如何实现还是很不清楚的 。&lt;/p&gt;
&lt;p&gt; 因为考虑到 JavaScript 是弱类型的语言 ， 首先就会遇到数字和字符串的转换等问题 ， 接着还有按位操作的问题也不知道在 JavaScript 中如何实现 。
 然后开始查询资料尝试解决这些问题 。 数字和字符串类型的转换是不需要的 ， 写代码尝试了下应该 JavaScript 自动做了类型转换 。&lt;/p&gt;
&lt;p&gt; 首先想到的思路是根据最大 32 位整数位移获取掩码对应的整数值 ， 然后将结果转换成点分格式的字符串 。 在网上找到了如下的代码 。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="lineno"&gt; 1 &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ip2long&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="lineno"&gt; 2 &lt;/span&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ipl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="lineno"&gt; 3 &lt;/span&gt;    &lt;span class="nx"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;octet&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="lineno"&gt; 4 &lt;/span&gt;        &lt;span class="nx"&gt;ipl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="lineno"&gt; 5 &lt;/span&gt;        &lt;span class="nx"&gt;ipl&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;octet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="lineno"&gt; 6 &lt;/span&gt;    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="lineno"&gt; 7 &lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ipl&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="lineno"&gt; 8 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="lineno"&gt; 9 &lt;/span&gt;
&lt;span class="lineno"&gt;10 &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;long2ip&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ipl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="lineno"&gt;11 &lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ipl&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="lineno"&gt;12 &lt;/span&gt;        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ipl&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="lineno"&gt;13 &lt;/span&gt;        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ipl&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="lineno"&gt;14 &lt;/span&gt;        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ipl&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="lineno"&gt;15 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 有了这两个方法就可以将计算得到的掩码整数值转换成点分格式了 。
 但是在做位运算的时候发现了一个坑 ， 在一边查资料一边尝试实现的第一个版本中 ， 掩码为 0 和掩码为 32 产生的结果一样 ， 都是 255.255.255.255。&lt;/p&gt;
&lt;!-- note
JavaScript 的左移运算保留数字的符号位 。 例如 ， 如果把  -2  左移  5  位 ， 得到的是  -64， 而不是  64。 符号仍然存储在第 32 位中 。  即使输出二进制字符串形式的负数 ， 显示的也是负号形式 （ 例如 ，-2  将显示  -10。） --&gt;
&lt;p&gt; 看来此方案不可行 ， 接着查资料发现了一个新的思路 ， 根据掩码生成四个小于等于 255 的值 ， 将这四个值拼成点分格式 。 这样实现避免了对符号位的操作 ， 甚好 。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="lineno"&gt;1 &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createNetmaskAddr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bitCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="lineno"&gt;2 &lt;/span&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;mask&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="lineno"&gt;3 &lt;/span&gt;  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="lineno"&gt;4 &lt;/span&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bitCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="lineno"&gt;5 &lt;/span&gt;    &lt;span class="nx"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="lineno"&gt;6 &lt;/span&gt;    &lt;span class="nx"&gt;bitCount&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="lineno"&gt;7 &lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="lineno"&gt;8 &lt;/span&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="lineno"&gt;9 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt; 参考资料 &lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/1908492/unsigned-integer-in-javascript"&gt;Unsigned Integer in Javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.w3school.com.cn/js/pro_js_operators_bitwise.asp"&gt;ECMAScript  位运算符 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/21903482/cidr-to-netmask-converion-in-javascript"&gt;CIDR to netmask converion in javascript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="javascript"></category></entry><entry><title>Hello Pelican &amp; GitHub Pages</title><link href="http://lennyhbt.github.io/hello.html" rel="alternate"></link><updated>2014-12-11T10:19:00+08:00</updated><author><name>Lennyh</name></author><id>tag:lennyhbt.github.io,2014-11-30:hello.html</id><summary type="html">&lt;p&gt; 不知不觉做技术也已经四年有余了 ， 四年来不管在技术 、 工作及生活中都积累了一些不错的经验教训 （ 以及很多好玩的东西 ）。&lt;/p&gt;
&lt;p&gt; 但是碍于个人的懒惰 ， 虽偶有尝试 ， 却从未能够坚持一直把学到的东西记录下来供以后 。&lt;/p&gt;
&lt;p&gt; 于是 ， 很多好东西消逝在时光中 ， 余实在不忍继续这样下去 。&lt;/p&gt;
&lt;p&gt; 于是 ， 下定决心 ， 在此搭建此平台 ， 希望自己能够坚持不懈 ， 把那些值得记录的东西记录下来 。&lt;/p&gt;
&lt;p&gt; 愿有机会满怀高兴的回翻这些有趣的东西 ， 愿有趣的东西越来越多 。&lt;/p&gt;
</summary><category term="缘起"></category></entry><entry><title>Hello Pelican &amp; GitHub Pages</title><link href="http://lennyhbt.github.io/test.html" rel="alternate"></link><updated>2014-12-11T10:19:00+08:00</updated><author><name>Lennyh</name></author><id>tag:lennyhbt.github.io,2014-11-30:test.html</id><summary type="html">&lt;p&gt;asdsafafasf&lt;/p&gt;
</summary><category term="test"></category></entry></feed>